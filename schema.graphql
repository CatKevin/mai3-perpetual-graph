type Factory @entity {
    # factory address
    id: ID!

    perpetualCount: BigInt!

    # total volume
    totalVolumeUSD: BigDecimal!
    totalVolume: BigDecimal!

    # total liquidity
    totalLiquidityUSD: BigDecimal!
    totalLiquidity: BigDecimal!

    # perpetuals for block handler
    perpetuals: [Perpetual!] @derivedFrom(field:"factory")

    # transactions
    txCount: BigInt!
}

type User @entity {
    # user address
    id: ID!
    marginAccounts: [MarginAccount!] @derivedFrom(field:"user")
    LiquidityAccount: [LiquidityAccount!] @derivedFrom(field:"user")
    proposals: [Proposal!] @derivedFrom(field:"proposer")
    votes: [Vote!] @derivedFrom(field:"voter")
}

type Token @entity {
    # token address
    id: ID!
    symbol: String!
    name: String!
    decimals: String!
    totalSupply: BigDecimal!
}

type Perpetual @entity {
    # perpetual address
    id: ID!
    factory: Factory!
    symbol: String!
    collateralName: String!
    collateralAddress: String!
    oracleAddress: String!
    voteAddress: String!
    shareAddress: String!
    operatorAddress: String!

    # set params
    spread: BigDecimal!
    feeRate: BigDecimal!
    maintanceMargin: BigDecimal!
    initMargin: BigDecimal!
    minMaintanceMargin: BigDecimal!

    # volume stats
    totalVolumeUSD: BigDecimal!
    totalVolumeCollateral: BigDecimal!
    totalFee: BigDecimal!
    txCount: BigInt!

    # liquidity
    liquidityAmount: BigDecimal!
    liquidityAmountUSD: BigDecimal!
    liquidityProviderCount: BigInt!
    shareToken: ShareToken!

    # vote
    vote: VoteContract!

    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!

    # perpetual status
    state: Int!
    settledAtTimestamp: BigInt
    settledAtBlockNumber: BigInt
}

type ShareToken @entity {
    # share token address
    id: ID!
    perpetual: Perpetual!
    totalSupply: BigDecimal!
    liquidityAccounts: [LiquidityAccount!]! @derivedFrom(field:"contract")
    delegates: [Delegate!]! @derivedFrom(field: "contract")
}

type LiquidityAccount @entity {
    # share token address + "-" + user address
    id: ID!
    contract: ShareToken!
    user: User!
    collateralAmount: BigDecimal!
    shareAmount: BigDecimal!
}

type VoteContract @entity {
    # vote contract address
    id: ID!
    perpetual: Perpetual!
    proposals: [Proposal!]! @derivedFrom(field: "contract")
}

type Trade @entity {
    # trasaction hash + "-" + index
    id: ID!
    perpetual: Perpetual!
    trader: User!
    amount: BigDecimal!
    price: BigDecimal!
    fee: BigDecimal!
    isClose: Boolean!
    pnl: BigDecimal
    type: Int!
    transactionHash: String!
    blockNumber: BigInt!
    timestamp: BigInt!
    logIndex: BigInt!
}

type MatchOrder @entity {
    # transaction hash + "-" + index
    id: ID!
    perpetual: Perpetual!
    orderHash: String!
    trader: User!
    amount: BigDecimal!
    type: Int!
    gas: BigDecimal!
    transactionHash: String!
    blockNumber: BigInt!
    timestamp: BigInt!
    logIndex: BigInt!
}

type MarginAccount @entity {
    # perpetual address + "-" + user address
    id: ID!
    user: User!
    perpetual: Perpetual!
    cashBalance: BigDecimal!
    position: BigDecimal!
    entryPrice: BigDecimal!
    entryValue: BigDecimal!
}

type TradeHourData @entity {
    # perpetual address + "-" + timeindex
    id: ID!
    perpetual: Perpetual!
    timestamp: Int!
    open: BigDecimal!
    close: BigDecimal!
    low: BigDecimal!
    high: BigDecimal!
    volume: BigDecimal!
}

type TradeDayData @entity {
    # perpetual address + "-" + timeindex
    id: ID!
    perpetual: Perpetual!
    timestamp: Int!
    open: BigDecimal!
    close: BigDecimal!
    low: BigDecimal!
    high: BigDecimal!
    volume: BigDecimal!
}

type TradeSevenDayData @entity {
    # perpetual address + "-" + timeindex
    id: ID!
    perpetual: Perpetual!
    timestamp: Int!
    open: BigDecimal!
    close: BigDecimal!
    low: BigDecimal!
    high: BigDecimal!
    volume: BigDecimal!
}

# move to trade?
type LiquidityHourData @entity {
    # perpetual address + "-" + timeindex
    id: ID!
    liquidityAmount: BigDecimal!
    liquidityAmountUSD: BigDecimal!
    timestamp: Int
}

type LiquidityDayData @entity {
    # perpetual address + "-" + timeindex
    id: ID!
    liquidityAmount: BigDecimal!
    liquidityAmountUSD: BigDecimal!
    timestamp: Int
}

type PriceHourData @entity {
    # oracle address + "-" + timeindex
    id: ID!
    price: BigDecimal!
}

type PriceDayData @entity {
    # oracle address + "-" + timeindex
    id: ID!
    price: BigDecimal!
    timestamp: Int
}

type PriceBucket @entity {
    id: ID!
    ethPrice: BigDecimal
    timestamp: Int
}

type McdexLiquidityHourData @entity {
    # factory address + "-" + timeindex
    id: ID!
    liquidityAmount: BigDecimal!
    liquidityAmountUSD: BigDecimal!
    totalvolume: BigDecimal!
    totalvolumeUSD: BigDecimal!
    timestamp: Int
}

# ====================== Voting ======================
type Proposal @entity {
    # vote contract address + "-" + proposal index
    id: ID!
    contract: VoteContract!
    proposer: String!
    type: Int!
    beginBlock: BigInt!
    endBlock: BigInt!
    timestamp: BigInt!
    votes: [Vote!] @derivedFrom(field: "proposal")
}

type Delegate @entity {
    # share token contract address + "-" + delegate address
    id: ID!
    user: User!
    contract: ShareToken!
    principals: [String!]
}

type Vote @entity {
    # proposal id + "-" + user address
    id: ID!
    voter: String!
    proposal: Proposal!
    support: Bool!
    votes: BigDecimal!
    timestamp: BigInt!
    # for delegated user
    delegate: String
    delegateVotes: BigDecimal
}

type ProposalShareTokenSnapshot @entity {
    # proposal id + "-" + user address
    id: ID!
    user: User!
    proposal: Proposal!
    totalSupply: BigDecimal!
    shareAmount: BigDecimal!
}

type ProposalDelegateSnapshot @entity {
    # proposal id + "-" + delegate address
    id: ID!
    proposal: Proposal!
    delegate: String!
    principals: [String!]
}